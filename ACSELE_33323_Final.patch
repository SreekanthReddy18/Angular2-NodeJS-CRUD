Index: ../../AcseleV13.8-Interseguro-PreProduccion/ClientSpecificFiles/Interseguro/web/WControllerWar/web/WEB-INF/classes/acsele-config-ext.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../../AcseleV13.8-Interseguro-PreProduccion/ClientSpecificFiles/Interseguro/web/WControllerWar/web/WEB-INF/classes/acsele-config-ext.xml	(revision 49170)
+++ ../../AcseleV13.8-Interseguro-PreProduccion/ClientSpecificFiles/Interseguro/web/WControllerWar/web/WEB-INF/classes/acsele-config-ext.xml	(revision )
@@ -425,6 +425,10 @@
           <!--class="com.consisint.acsele.workflow.claimapi.service.impl.ClaimProcessServiceInterImpl"/>-->
 
     <!--Casos CRM -->
+    <bean id="com.consisint.acsele.util.context.CRMInternalServices"
+          class="com.consisint.acsele.util.context.CRMExternalServices"
+          singleton="true" />
+
     <bean id="com.consisint.acsele.interseguro.interfaces.crm.persister.CRMCasePersister"
           class="com.consisint.acsele.interseguro.interfaces.crm.persister.hibernate_persister.CRMCaseHibernatePersister"
           singleton="true" />
Index: ../Application/Core/AcseleReports/src/com/consisint/acsele/document/persister/hibernate/DocumentHistoryHibernatePersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/AcseleReports/src/com/consisint/acsele/document/persister/hibernate/DocumentHistoryHibernatePersister.java	(revision 49180)
+++ ../Application/Core/AcseleReports/src/com/consisint/acsele/document/persister/hibernate/DocumentHistoryHibernatePersister.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/CRMCasePersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/CRMCasePersister.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/CRMCasePersister.java	(revision )
@@ -0,0 +1,66 @@
+package com.consisint.acsele.interseguro.interfaces.crm.persister;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.util.BeanFactory;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+
+import java.util.List;
+
+/**
+ * Created by Darwin on 24/01/2017.
+ */
+public interface CRMCasePersister {
+
+    CRMCase loadByCRMNumber(String crmNumber) throws TechnicalException;
+
+    void save(CRMCase crmCase);
+
+    void update(CRMCase crmCase);
+
+    void delete(CRMCase crmCase);
+
+    int countAll() throws TechnicalException;
+
+    class Impl {
+        private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+        private static final CRMCasePersister persister = getBean();
+
+        private static CRMCasePersister getBean(){
+            try{
+                return (CRMCasePersister) BeanFactory.getBean(CRMCasePersister.class);
+            } catch (Throwable e){
+                log.error("[CRMCasePersister] ", e);
+                return null;
+            }
+        }
+
+        public static CRMCasePersister getInstance() {
+            return persister;
+        }
+
+        public static CRMCase createNew(final String crmNumber, final Long policyId, final String policyNumber, final String mediumAnswer, final Integer status) {
+            CRMCase casoCrm = new CRMCase(crmNumber, policyId, policyNumber, mediumAnswer, status);
+            getInstance().save(casoCrm);
+            return casoCrm;
+        }
+
+        public static void update(CRMCase casoCRM) {
+            getInstance().update(casoCRM);
+        }
+
+    }
+
+    List<CRMCase> loadByIdPolicy(long idPolicy);
+
+    List<CRMCase> loadByIdPolicyAssign(long idPolicy);
+
+    CRMCase loadByClaimId (long claimId);
+
+    List<CRMCase> loadAll() throws TechnicalException;
+
+    List<CRMCase> loadByIdPolicyAsociated(long idPolicy);
+
+}
+
+
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/LoadRefuseReserveTemplateAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/LoadRefuseReserveTemplateAction.java	(revision 49183)
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/LoadRefuseReserveTemplateAction.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-986-CREATE_EXT_LOGCRMCASE.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-986-CREATE_EXT_LOGCRMCASE.sql	(revision )
+++ ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-986-CREATE_EXT_LOGCRMCASE.sql	(revision )
@@ -0,0 +1,35 @@
+CREATE TABLE EXT_LOGCRMCASE
+(
+  ELCRMID         NUMBER(19)                    NOT NULL,
+  CRMNUMBER       VARCHAR2(100 BYTE)            NOT NULL,
+  MOVEMENTDATE    DATE                          NOT NULL,
+  MOVEMENTSTATUS  VARCHAR2(50 BYTE)             NOT NULL,
+  JSONIN          CLOB                          NOT NULL,
+  JSONOUT         CLOB                          NOT NULL
+);
+
+COMMENT ON TABLE EXT_LOGCRMCASE IS 'Saves Log to CRM Cases to Interfaz, related to tables: EXT_CRMCASE';
+COMMENT ON COLUMN EXT_LOGCRMCASE.ELCRMID IS 'PK - CRM Cases Log Identifier, Primary Key';
+COMMENT ON COLUMN EXT_LOGCRMCASE.CRMNUMBER IS 'FK - CRM Cases, Foreign Key, Source Table EXT_CRMCASE';
+COMMENT ON COLUMN EXT_LOGCRMCASE.MOVEMENTDATE IS 'Movement Date';
+COMMENT ON COLUMN EXT_LOGCRMCASE.MOVEMENTSTATUS IS 'Movement Status';
+COMMENT ON COLUMN EXT_LOGCRMCASE.JSONIN IS 'JSON In of Web Service';
+COMMENT ON COLUMN EXT_LOGCRMCASE.JSONOUT IS 'JSON Out of Web Service';
+
+CREATE UNIQUE INDEX PK_ELCRM ON EXT_LOGCRMCASE (ELCRMID) LOGGING;
+
+ALTER TABLE EXT_LOGCRMCASE ADD (
+  CONSTRAINT PK_ELCRM
+  PRIMARY KEY
+  (ELCRMID)
+  USING INDEX PK_ELCRM
+  ENABLE VALIDATE);
+
+ALTER TABLE EXT_LOGCRMCASE ADD (
+  CONSTRAINT FK_ELCRM_CRMNUMBER
+  FOREIGN KEY (CRMNUMBER)
+  REFERENCES EXT_CRMCASE (CRMNUMBER)
+  ENABLE VALIDATE);
+
+INSERT INTO STMA_TABLEINFORMATION VALUES ('EXT_LOGCRMCASE', NULL, 'XELCRM', 'EXT', 'Tabla Log de procesos en la Intermedia de Casos CRM.');
+COMMIT;
\ No newline at end of file
Index: ../Application/Core/resources/CRMOpenItem.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/CRMOpenItem.hbm.xml	(revision )
+++ ../Application/Core/resources/CRMOpenItem.hbm.xml	(revision )
@@ -0,0 +1,16 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 2.0//EN"
+        "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">
+
+<hibernate-mapping>
+    <class
+        name="com.consisint.acsele.interseguro.interfaces.crm.entity.CRMOpenItem"
+        table="EXT_CRMOPENITEM">
+        <composite-id name="pk" class="com.consisint.acsele.interseguro.interfaces.crm.entity.PK" unsaved-value="any">
+            <key-many-to-one name="crmCase" column="CRMNUMBER" class="com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase" />
+            <key-property name="opmId" column="OPMID"/>
+        </composite-id>
+    </class>
+
+</hibernate-mapping>
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/CRMOpenItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/CRMOpenItem.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/CRMOpenItem.java	(revision )
@@ -0,0 +1,33 @@
+package com.consisint.acsele.interseguro.interfaces.crm.entity;
+
+import java.io.Serializable;
+
+/**
+ * Created by ext.dpalma on 24/01/2017.
+ */
+public class CRMOpenItem implements Serializable {
+    private static final long serialVersionUID = -2014573273976931300L;
+    PK pk;
+
+    public CRMOpenItem() { }
+
+    public CRMOpenItem(PK pk) { this.pk = pk; }
+
+    public PK getPk() {
+        return pk;
+    }
+
+    public void setPk(PK pk) {
+        this.pk = pk;
+    }
+
+    @Override
+    public int hashCode() {
+        return pk.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        return pk.equals(((CRMOpenItem)o).pk);
+    }
+}
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/product/server/CasoCRM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/product/server/CasoCRM.java	(revision )
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/product/server/CasoCRM.java	(revision )
@@ -0,0 +1,127 @@
+package com.consisint.acsele.product.server;
+
+
+import com.consisint.acsele.UserInfo;
+import com.consisint.acsele.template.server.ConfigurableObjectType;
+import com.consisint.acsele.util.JDBCUtil;
+import com.consisint.acsele.util.logging.AcseleLogger;
+
+import java.io.Serializable;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+
+/**
+ * The product wrapper collecion class.
+ * Title: CasoCRM.java <br>
+ * This class represent a assembly of CasoCRM
+ * Copyright: (c) 2017 Consis International<br>
+ * Company: Consis International<br>
+ * @author Consis International (CON)
+ * @author Darwin Palma (DP)
+ * <br>
+ * Changes:<br>
+ * <ul>
+ *
+ * </ul>
+ */
+
+public class CasoCRM implements Serializable {
+
+    private static final AcseleLogger log = AcseleLogger.getLogger(CasoCRM.class);
+    private final static Lock lock = new ReentrantLock();
+
+    private static Map<String, CasoCRM> allProducts = new ConcurrentHashMap<String, CasoCRM>();
+
+    //    private ProxyVector productos;
+    private boolean isDirty = true;
+    private Map<String, String> mapping;
+    protected ConfigurableObjectType objectType;
+
+    private static final long serialVersionUID = -6311518460774194702L;
+
+    public static CasoCRM getInstance() {
+        return checkAndReturnProducts(UserInfo.getCountry());
+    }
+
+
+    private static CasoCRM checkAndReturnProducts(String country_code) {
+        CasoCRM productosLocal = null;
+        lock.lock();
+        try {
+            productosLocal = CasoCRM.allProducts.get(country_code);
+            if ((productosLocal == null) || (productosLocal.isDirty)) {
+                log.info("Productos dirty or not iniciality for country " + country_code);
+                productosLocal = new CasoCRM();
+                CasoCRM.allProducts.put(country_code, productosLocal);
+                productosLocal.isDirty = false;
+            }
+        } finally {
+            lock.unlock();
+        }
+        return productosLocal;
+    }
+    /**
+     * Return a boolean indicating if the CasoCRM contains the key
+     * @param key key
+     * @return boolean indicating if the CasoCRM contains the key
+     */
+    public boolean containsKey(String key) {
+        //  The objects of mapping are description of products
+        return mapping.containsValue(key);
+    }
+
+    /**
+     * Return a boolean indicating if the CasoCRM contains the object
+     * @param object object
+     * @return boolean indicating if the CasoCRM contains the object
+     */
+    public boolean contains(Object object) {
+        return false;
+    }
+
+    /**
+     *
+     * @return Hashtable containing a pairs CRMCASE,CRMCASE from all CasoCRM
+     */
+    public Hashtable<String, String> getAllCRMCase()
+    {
+        log.info( " *** METHOD NAME  " + "getAllCRMCase" );
+        //--------------------------- ACSELE - 5588 --------------------------------------
+        String query = "SELECT DISTINCT ( CRMNUMBER ) AS CRMCASE FROM EXT_CRMCASE ORDER BY CRMNUMBER";
+        Connection conn = JDBCUtil.openUserDbConnection();
+        PreparedStatement prepStmt = null;
+        ResultSet rs = null;
+
+        Hashtable<String, String> crmNumberCaseList = new Hashtable<String, String>();
+        //search of all CRMCASE
+
+        try
+        {
+            ArrayList<String> values = new ArrayList<String>();
+            prepStmt = conn.prepareStatement( query );
+            rs       = prepStmt.executeQuery();
+            if( null != rs && rs.isBeforeFirst() )
+            {
+                while( rs.next() )
+                {
+                    crmNumberCaseList.put( ( rs.getString( "CRMCASE" ) ),  rs.getString( "CRMCASE" ) );
+                }
+    
+                rs.close();
+            }
+        }
+        catch( SQLException E )
+        {
+            log.error( E.getMessage() );
+        }
+        return crmNumberCaseList;
+    }
+
+}
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimapi/ClaimComposerWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimapi/ClaimComposerWrapper.java	(revision 49183)
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimapi/ClaimComposerWrapper.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/AcseleReports/src/com/consisint/acsele/document/DocumentHistoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/AcseleReports/src/com/consisint/acsele/document/DocumentHistoryImpl.java	(revision 49180)
+++ ../Application/Core/AcseleReports/src/com/consisint/acsele/document/DocumentHistoryImpl.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/LogCRMCase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/LogCRMCase.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/LogCRMCase.java	(revision )
@@ -0,0 +1,76 @@
+package com.consisint.acsele.interseguro.interfaces.crm.entity;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * Created by ext.dpalma on 24/01/2017.
+ */
+public class LogCRMCase implements Serializable {
+    private static final long serialVersionUID = -6227649286347071435L;
+    private Long elCRMId;
+    private String crmNumber;
+    private Date movementDate;
+    private String movementStatus;
+    private String jsonIn;
+    private String jsonOut;
+
+    public LogCRMCase() {
+    }
+
+    public LogCRMCase(String crmNumber, Date movementDate, String movementStatus, String jsonIn, String jsonOut) {
+        this.crmNumber = crmNumber;
+        this.movementDate = movementDate;
+        this.movementStatus = movementStatus;
+        this.jsonIn = jsonIn;
+        this.jsonOut = jsonOut;
+    }
+
+    public Long getElCRMId() {
+        return elCRMId;
+    }
+
+    public void setElCRMId(Long elCRMId) {
+        this.elCRMId = elCRMId;
+    }
+
+    public String getCrmNumber() {
+        return crmNumber;
+    }
+
+    public void setCrmNumber(String crmNumber) {
+        this.crmNumber = crmNumber;
+    }
+
+    public Date getMovementDate() {
+        return movementDate;
+    }
+
+    public void setMovementDate(Date movementDate) {
+        this.movementDate = movementDate;
+    }
+
+    public String getMovementStatus() {
+        return movementStatus;
+    }
+
+    public void setMovementStatus(String movementStatus) {
+        this.movementStatus = movementStatus;
+    }
+
+    public String getJsonIn() {
+        return jsonIn;
+    }
+
+    public void setJsonIn(String jsonIn) {
+        this.jsonIn = jsonIn;
+    }
+
+    public String getJsonOut() {
+        return jsonOut;
+    }
+
+    public void setJsonOut(String jsonOut) {
+        this.jsonOut = jsonOut;
+    }
+}
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/util/context/CRMExternalServices.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/util/context/CRMExternalServices.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/util/context/CRMExternalServices.java	(revision )
@@ -0,0 +1,190 @@
+package com.consisint.acsele.util.context;
+
+import com.consisint.acsele.ClientInfo;
+import com.consisint.acsele.CriteriaDCO;
+import com.consisint.acsele.DefaultConfigurableObjectManager;
+import com.consisint.acsele.RelationalOperator;
+import com.consisint.acsele.document.DocumentHistoryImpl;
+import com.consisint.acsele.document.letter.Letter;
+import com.consisint.acsele.document.persister.DocumentHistoryPersister;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMOpenItem;
+import com.consisint.acsele.interseguro.interfaces.crm.impl.CRMCaseServiceImpl;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.CRMCasePersister;
+import com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.workers.EventNotificationWorkerCRMClaim;
+import com.consisint.acsele.template.api.Template;
+import com.consisint.acsele.template.server.ConfigurableObjectType;
+import com.consisint.acsele.uaa.OpenItem;
+import com.consisint.acsele.util.AcseleConf;
+import com.consisint.acsele.util.error.ApplicationExceptionChecked;
+import com.consisint.acsele.util.logging.AcseleLogger;
+import com.consisint.acsele.workflow.claimapi.Claim;
+import com.consisint.acsele.workflow.claimapi.ClaimComposer;
+
+import javax.servlet.http.HttpServletRequest;
+import java.rmi.RemoteException;
+import java.util.*;
+
+/**
+ * Created by ext.dpalma on 22/02/2017.
+ */
+public class CRMExternalServices implements CRMInternalServices {
+    private static final AcseleLogger log = AcseleLogger.getLogger(CRMExternalServices.class);
+
+    @Override
+    public String processClaimComposer(Claim claim, OpenItem openItem) {
+        String messageCRM = null;
+        if(claim.getPk()!=null && ClientInfo.isClientRunning("Interseguro")){
+            CRMCase crmConsult = CRMCasePersister.Impl.getInstance().loadByClaimId(Long.parseLong(claim.getPk()));
+            if(crmConsult!=null){
+                CRMCaseServiceImpl.Impl.updateOpenItem(crmConsult.getCrmNumber(),openItem.getOpenItemID());
+                CRMCase crmPublish = CRMCasePersister.Impl.getInstance().loadByClaimId(Long.parseLong(claim.getPk()));
+                CRMCaseServiceImpl.Impl.getInstance().sendInfoToCRM(crmPublish);
+                messageCRM = EventNotificationWorkerCRMClaim.getMessageResponse();
+            }
+        }
+        return messageCRM;
+    }
+
+    @Override
+    public String processThirdParty(String claimID) {
+        CRMCase crmPublish = new CRMCase();
+        String crmNumber = "";
+        if(claimID!=null && ClientInfo.isClientRunning("Interseguro")){
+            crmPublish = CRMCasePersister.Impl.getInstance().loadByClaimId(Long.parseLong(claimID));
+            if(crmPublish!=null){
+                crmNumber = crmPublish.getCrmNumber();
+            }
+        }
+        return crmNumber;
+    }
+
+
+    public void processSetStateWithData(String claimID) {
+        if(claimID!=null && ClientInfo.isClientRunning("Interseguro")){
+            CRMCase crmConsult = CRMCasePersister.Impl.getInstance().loadByClaimId(Long.parseLong(claimID));
+            if(crmConsult!=null){
+                CRMCaseServiceImpl.Impl.getInstance().sendInfoToCRM(crmConsult);
+            }
+        }
+    }
+
+    public void processUpdateCrm(String crmNumber, String operationId, String associationType) {
+        CRMCase crm = new CRMCase();
+        crm.setCrmNumber(crmNumber);
+        crm.setAssociationType(Integer.valueOf(associationType));
+        crm = CRMCasePersister.Impl.getInstance().loadByCRMNumber(crm.getCrmNumber());
+
+        if (associationType.equals("1")) {
+            Set<CRMOpenItem> openIemList = new HashSet<CRMOpenItem>();
+            CRMOpenItem openitem = new CRMOpenItem();
+            openitem.getPk().setCrmCase(crm);
+            openitem.getPk().setOpmId(Long.valueOf(operationId));
+            openIemList.add(openitem);
+            crm.setCrmOpenItems(openIemList);
+        } else if (associationType.equals("2")) {
+            crm.setClaimId(Long.valueOf(operationId));
+        } else if (associationType.equals("3")) {
+            crm.setCcvId(Long.valueOf(operationId));
+        } else if (associationType.equals("4")) {
+            crm.setHltId(Long.valueOf(operationId));
+        }
+        // actualizando el crm
+        CRMCasePersister.Impl.getInstance().update(crm);
+    }
+
+    @Override
+    public HttpServletRequest processExecuteCrm(long policyId, HttpServletRequest request){
+        List<CRMCase> crmCase = CRMCasePersister.Impl.getInstance().loadByIdPolicyAssign(policyId); // Manejar excepcion cuando ya exista una asociacion .....
+        List<CRMCase> crmCaseAsociated = CRMCasePersister.Impl.getInstance().loadByIdPolicyAsociated(policyId); // Manejar excepcion cuando ya exista una asociacion .....
+        request.setAttribute("crmList",crmCase);
+        request.setAttribute("crmCaseAsociated",crmCaseAsociated);
+
+        return request;
+    }
+
+
+    @Override
+    public String processClientCRMUpdateAction(String crmNumber, String associationType, Long claimID, Long coverageId) {
+        return CRMCaseServiceImpl.Impl.updateParcial(crmNumber, associationType, claimID, coverageId);
+    }
+
+    @Override
+    public void processThirdPartyPublish(String claimID, Letter letterToSend) {
+        CRMCase crmPublish = new CRMCase();
+        String crmNumber = "";
+        if(claimID!=null && ClientInfo.isClientRunning("Interseguro")){
+            crmPublish = CRMCasePersister.Impl.getInstance().loadByClaimId(Long.parseLong(claimID));
+            if(crmPublish!=null){
+                crmNumber = crmPublish.getCrmNumber();
+            }
+        }
+
+        if (crmPublish != null) {
+            List<DocumentHistoryImpl> letterHistoryDocuments = DocumentHistoryPersister.Impl.loadByLetterIdCRM(letterToSend.getPk());
+            letterHistoryDocuments.listIterator();
+            long sdocId = letterHistoryDocuments.get(0).getDocPk();
+            long htlId = letterHistoryDocuments.get(0).getPk();
+            if (sdocId == letterToSend.getPk() && ClientInfo.isClientRunning("Interseguro")) {
+                if (isValidLetterCRM(letterToSend.getName())) {
+                    CRMCaseServiceImpl.Impl.updateLetter(crmNumber, htlId);
+                    CRMCaseServiceImpl.Impl.getInstance().sendInfoToCRM(crmPublish);
+                }
+            }
+        }
+    }
+
+    @Override
+    public void processAccountAction(String claimID) {
+        if (claimID != null && ClientInfo.isClientRunning("Interseguro")) {
+            CRMCase crmPublish = CRMCasePersister.Impl.getInstance().loadByClaimId(Long.parseLong(claimID));
+            if (crmPublish != null) {
+                CRMCaseServiceImpl.Impl.getInstance().sendInfoToCRM(crmPublish);
+            }
+        }
+    }
+
+    @Override
+    public void processEditClaimObjectAction(ClaimComposer composer) {
+        try {
+            if(composer.getClaim()!=null && ClientInfo.isClientRunning("Interseguro")){
+                CRMCase crmPublish = CRMCasePersister.Impl.getInstance().loadByClaimId(composer.getClaim().getId());
+                if(crmPublish!=null){
+                    CRMCaseServiceImpl.Impl.getInstance().sendInfoToCRM(crmPublish);
+                }
+            }
+        } catch (ApplicationExceptionChecked applicationExceptionChecked) {
+            log.error("[ApplicationExceptionChecked]", applicationExceptionChecked);
+        } catch (RemoteException e) {
+            log.error("[RemoteException]", e);
+        }
+    }
+
+
+    @Override
+    public Hashtable processLoadRefuseReserveAction(String claimID, Hashtable dataFormHashtable) {
+        if(claimID!=null && ClientInfo.isClientRunning("Interseguro")) {
+            com.consisint.acsele.openapi.claim.Claim claim = com.consisint.acsele.openapi.claim.Claim.findByPk(claimID);
+            List<CRMCase> lCrmCase = CRMCasePersister.Impl.getInstance().loadByIdPolicy(Long.parseLong(claim.getPolicyId()));
+            dataFormHashtable.put("lCrmCase", lCrmCase);
+        }
+        return dataFormHashtable;
+    }
+
+
+    private boolean isValidLetterCRM(String letter){
+        if(letter!=null){
+            if(!existInTDLetter(letter)) return false;
+        }else{
+            return false;
+        }
+        return true;
+    }
+    public boolean existInTDLetter(String letterName){
+        List<CriteriaDCO> criteria = new LinkedList<CriteriaDCO>(Arrays.asList(new CriteriaDCO[]{new CriteriaDCO(AcseleConf.getProperty("letterCRMList"), RelationalOperator.EQ, letterName, true)}));
+        Template cot = ConfigurableObjectType.Impl.load("TDEXTLETTERCASOCRM");
+        List<com.consisint.acsele.DefaultConfigurableObject> dcos = DefaultConfigurableObjectManager.loadAllByCOT(cot, criteria);
+        if(dcos.size() == 1) return true;
+        return false;
+    }
+}
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/CRMOpenItemHibernatePersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/CRMOpenItemHibernatePersister.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/CRMOpenItemHibernatePersister.java	(revision )
@@ -0,0 +1,108 @@
+package com.consisint.acsele.interseguro.interfaces.crm.persister.hibernate_persister;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMOpenItem;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.CRMOpenItemPersister;
+import com.consisint.acsele.persistence.hibernate.AcseleHibernateSessionProvider;
+import com.consisint.acsele.util.error.Exceptions;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+import net.sf.hibernate.Criteria;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.ObjectNotFoundException;
+import net.sf.hibernate.Session;
+import net.sf.hibernate.expression.Expression;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * Created by ext.dpalma on 24/01/2017.
+ */
+public class CRMOpenItemHibernatePersister implements CRMOpenItemPersister {
+    private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+    //private boolean isCaching;
+
+    private CRMOpenItemHibernatePersister() {
+    }
+
+    @Override
+    public CRMOpenItem loadByOpmId(long opmId) throws TechnicalException {
+        if (opmId <= 0) throw new TechnicalException(Exceptions.HSErrorLoadingObject, new Exception("Invalid Value - Id"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMOpenItem.class);
+            crit.add(Expression.eq("pk.opmId", opmId));
+            return (CRMOpenItem) crit.uniqueResult();
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    @Override
+    public List<CRMOpenItem> loadByCRMNumber(String crmNumber) throws TechnicalException {
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMOpenItem.class);
+            crit.add(Expression.eq("pk.crmCase.crmNumber", crmNumber));
+            ArrayList<CRMOpenItem> crmOpenItem = new ArrayList<CRMOpenItem>(crit.list());
+            return crmOpenItem;
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    @Override
+    public void save(CRMOpenItem crmOpenItem){
+        if (crmOpenItem == null || crmOpenItem.getPk() == null)  throw new TechnicalException(Exceptions.HSErrorSavingObject, new Exception("Invalid Value CRM IS NULL"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.save(crmOpenItem);
+            session.flush();
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);}
+    }
+
+    public void update(CRMOpenItem crmOpenItem) throws TechnicalException {
+        if (crmOpenItem == null)  throw new TechnicalException(Exceptions.HSErrorSavingObject, new Exception("Invalid Value CRM IS NULL"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.update(crmOpenItem);
+            session.flush();
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);}
+    }
+    //
+    public void delete(CRMOpenItem crmOpenItem) throws TechnicalException {
+        if (crmOpenItem == null || crmOpenItem.getPk() == null) throw new TechnicalException(Exceptions.HSErrorDeletingObject,
+                    new Exception("Invalid Value CRM IS NULL"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.delete(crmOpenItem);
+            session.flush();
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorDeletingObject, e);
+        }
+    }
+
+    @Override
+    public int countAll() throws TechnicalException {
+        return 0;
+    }
+
+}
Index: ../Application/Core/resources/CRMCase.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/CRMCase.hbm.xml	(revision )
+++ ../Application/Core/resources/CRMCase.hbm.xml	(revision )
@@ -0,0 +1,27 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 2.0//EN"
+        "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">
+
+<hibernate-mapping>
+    <class
+        name="com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase"
+        table="EXT_CRMCASE">
+        <id name="crmNumber" column="CRMNUMBER" unsaved-value="null">
+            <generator class="assigned"/>
+        </id>
+        <property name="policyId" column="POLICYID"/>
+        <property name="policyNumber" column="POLICYNUMBER"/>
+        <property name="mediumAnswer" column="MEDIUMANSWER"/>
+        <property name="status" column="STATUS"/>
+        <property name="associationType" column="ASSOCIATIONTYPE"/>
+        <property name="claimId" column="CLAIMID"/>
+        <property name="ccvId" column="CCVID"/>
+        <property name="hltId" column="HLT_ID"/>
+        <set name="crmOpenItems" table="EXT_CRMOPENITEM" lazy="false" inverse="true" cascade="all-delete-orphan">
+            <key column="CRMNUMBER"/>
+            <one-to-many class="com.consisint.acsele.interseguro.interfaces.crm.entity.CRMOpenItem" />
+        </set>
+    </class>
+
+</hibernate-mapping>
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/CRMCase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/CRMCase.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/CRMCase.java	(revision )
@@ -0,0 +1,159 @@
+package com.consisint.acsele.interseguro.interfaces.crm.entity;
+
+import java.io.Serializable;
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Created by ext.dpalma on 24/01/2017.
+ */
+public class CRMCase implements Serializable {
+    private static final long serialVersionUID = 4498683215363441283L;
+
+    private String crmNumber;
+    private Long policyId;
+    private String policyNumber;
+    private String mediumAnswer;
+    private Integer status;
+    private Integer associationType;
+    private Long claimId;
+    private Long ccvId;
+    private Long hltId;
+    private Set<CRMOpenItem> crmOpenItems = new HashSet<CRMOpenItem>();
+    transient private String claimNumber;
+    transient private String ccvName;
+    transient private String letterName;
+
+    public CRMCase() {
+    }
+
+    public CRMCase(String crmNumber, Long policyId, String policyNumber, String mediumAnswer, Integer status) {
+        this.crmNumber = crmNumber;
+        this.policyId = policyId;
+        this.policyNumber = policyNumber;
+        this.mediumAnswer = mediumAnswer;
+        this.status = status;
+    }
+
+    public String getCrmNumber() {
+        return crmNumber;
+    }
+
+    public void setCrmNumber(String crmNumber) {
+        this.crmNumber = crmNumber;
+    }
+
+    public Long getPolicyId() {
+        return policyId;
+    }
+
+    public void setPolicyId(Long policyId) {
+        this.policyId = policyId;
+    }
+
+    public String getPolicyNumber() {
+        return policyNumber;
+    }
+
+    public void setPolicyNumber(String policyNumber) {
+        this.policyNumber = policyNumber;
+    }
+
+    public String getMediumAnswer() {
+        return mediumAnswer;
+    }
+
+    public void setMediumAnswer(String mediumAnswer) {
+        this.mediumAnswer = mediumAnswer;
+    }
+
+    public Integer getStatus() {
+        return status;
+    }
+
+    public void setStatus(Integer status) {
+        this.status = status;
+    }
+
+    public Integer getAssociationType() {
+        return associationType;
+    }
+
+    public void setAssociationType(Integer associationType) {
+        this.associationType = associationType;
+    }
+
+    public Long getClaimId() {
+        return claimId;
+    }
+
+    public void setClaimId(Long claimId) {
+        this.claimId = claimId;
+    }
+
+    public Long getCcvId() {
+        return ccvId;
+    }
+
+    public void setCcvId(Long ccvId) {
+        this.ccvId = ccvId;
+    }
+
+    public Long getHltId() {
+        return hltId;
+    }
+
+    public void setHltId(Long hltId) {
+        this.hltId = hltId;
+    }
+
+    public Set<CRMOpenItem> getCrmOpenItems() {
+        return crmOpenItems;
+    }
+
+    public void setCrmOpenItems(Set<CRMOpenItem> crmOpenItems) {
+        this.crmOpenItems = crmOpenItems;
+    }
+
+    public String getCcvName() {
+        return ccvName;
+    }
+
+    public void setCcvName(String ccvName) {
+        this.ccvName = ccvName;
+    }
+
+    public String getLetterName() {
+        return letterName;
+    }
+
+    public void setLetterName(String letterName) {
+        this.letterName = letterName;
+    }
+
+    public String getClaimNumber() {
+        return claimNumber;
+    }
+
+    public void setClaimNumber(String claimNumber) {
+        this.claimNumber = claimNumber;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        CRMCase crmCase = (CRMCase) o;
+        if (!crmNumber.equals(crmCase.crmNumber)) return false;
+        if (!policyId.equals(crmCase.policyId)) return false;        
+        return true/*status.equals(crmCase.status)*/;
+
+    }
+
+    @Override
+    public int hashCode() {
+        int result = crmNumber.hashCode();
+        result = 31 * result + policyId.hashCode();
+        return result;
+    }
+}
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/LogCRMCasePersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/LogCRMCasePersister.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/LogCRMCasePersister.java	(revision )
@@ -0,0 +1,55 @@
+package com.consisint.acsele.interseguro.interfaces.crm.persister;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.LogCRMCase;
+import com.consisint.acsele.util.BeanFactory;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Created by Darwin on 24/01/2017.
+ */
+public interface LogCRMCasePersister {
+
+    List<LogCRMCase> loadByCRMNumber(String crmNumber) throws TechnicalException;
+
+    void save(LogCRMCase crmCase);
+
+    void update(LogCRMCase crmCase);
+
+    void delete(LogCRMCase crmCase);
+
+    int countAll() throws TechnicalException;
+
+    void deleteByCRMCase(CRMCase o);
+
+    class Impl {
+        private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+        private static final LogCRMCasePersister persister = getBean();
+
+        private static LogCRMCasePersister getBean(){
+            try{
+                return (LogCRMCasePersister) BeanFactory.getBean(LogCRMCasePersister.class);
+            } catch (Throwable e){
+                log.error("[CRMCasePersister] ", e);
+                return null;
+            }
+        }
+
+        public static LogCRMCasePersister getInstance() {
+            return persister;
+        }
+
+        public static void createNew(String nroCaso, Date date, String movementStatus, String jsonIn, String jsonOut) {
+            LogCRMCasePersister.Impl.getInstance().save(new LogCRMCase(nroCaso, date, movementStatus, jsonIn, jsonOut));
+        }
+    }
+
+    List<LogCRMCase> loadByElCRMId(long elCRMId);
+
+}
+
+
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/product/server/HistoryDocumentGenerated.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/product/server/HistoryDocumentGenerated.java	(revision 49180)
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/product/server/HistoryDocumentGenerated.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/AcseleReports/src/com/consisint/acsele/document/persister/DocumentHistoryPersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/AcseleReports/src/com/consisint/acsele/document/persister/DocumentHistoryPersister.java	(revision 49180)
+++ ../Application/Core/AcseleReports/src/com/consisint/acsele/document/persister/DocumentHistoryPersister.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/policy/search/handlers/SearchRequestHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/policy/search/handlers/SearchRequestHandler.java	(revision 49180)
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/policy/search/handlers/SearchRequestHandler.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/SetStateWithDataDCOAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/SetStateWithDataDCOAction.java	(revision 49183)
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/SetStateWithDataDCOAction.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/enums/StatusAssociationTypeCRM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/enums/StatusAssociationTypeCRM.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/enums/StatusAssociationTypeCRM.java	(revision )
@@ -0,0 +1,41 @@
+package com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.enums;
+
+import com.consisint.acsele.UserInfo;
+
+import java.util.ResourceBundle;
+
+/**
+ * Created by ext.dpalma on 27/01/2017.
+ */
+public enum StatusAssociationTypeCRM {
+    // Applied Operation: After applying an AssociationTypeCRM
+    AP(1, "crm.AssociationType.aproved"),
+    RS(2, "crm.AssociationType.rejectClaim"),
+    RC(3, "crm.AssociationType.rejectCoverage"),
+    RR(4, "crm.AssociationType.rejectRequire"); // agregar a bundled
+
+    private int value;
+    private String bundled;
+
+    StatusAssociationTypeCRM(int value, String bundled) {
+        this.value = value;
+        this.bundled = bundled;
+    }
+
+    public int getValue() {
+        return value;
+    }
+
+    public String getDescription() {
+        return getResourceBundle().getString(bundled);
+    }
+
+    private static ResourceBundle getResourceBundle() {
+        return ResourceBundle.getBundle("ClaimMessagesBundle", UserInfo.getLocale());
+    }
+
+    public static StatusAssociationTypeCRM getIntanceByValue(int value) {
+        for (StatusAssociationTypeCRM o : StatusAssociationTypeCRM.values()) if (o.value == value) return o;
+        return null;
+    }
+}
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/claim/persister/jdbc/QueryBuilderClaim.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/claim/persister/jdbc/QueryBuilderClaim.java	(revision 49180)
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/claim/persister/jdbc/QueryBuilderClaim.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/CRMCaseServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/CRMCaseServiceImpl.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/CRMCaseServiceImpl.java	(revision )
@@ -0,0 +1,95 @@
+package com.consisint.acsele.interseguro.interfaces.crm.impl;
+
+import com.consisint.acsele.UserInfo;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.impl.services.CRMCaseService;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.CRMCasePersister;
+import com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.EventNotificationWorker;
+import com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.workers.EventNotificationWorkerCRMClaim;
+import com.consisint.acsele.util.CommonMessages;
+import com.consisint.acsele.util.error.ApplicationException;
+import com.consisint.acsele.util.error.Exceptions;
+import com.consisint.acsele.util.error.TechnicalException;
+import net.sf.hibernate.exception.ConstraintViolationException;
+
+import java.util.ResourceBundle;
+
+import static com.consisint.acsele.util.CommonMessages.COMUNMESSAGES;
+
+/**
+ * Title: CRMCaseImpl.java <br>
+ * Copyright: (c) 2017 Consis International<br>
+ * Company: Consis International<br>
+ *
+ * @author Consis International (CON)
+ * @author Darwin Palma (DP)
+ * @version Acsel-e
+ */
+public class CRMCaseServiceImpl implements CRMCaseService {
+
+    private CRMCasePersister crmCasePersister;
+
+    private ResourceBundle comunMessageBundle = ResourceBundle.getBundle(COMUNMESSAGES, UserInfo.getLocale());
+
+    @Override
+    public CRMCase load(CRMCase crmCase) throws ApplicationException, TechnicalException {
+        return crmCasePersister.loadByCRMNumber(crmCase.getCrmNumber());
+    }
+
+    @Override
+    public String create(CRMCase crmCase) throws TechnicalException {
+        try {
+            crmCasePersister.save(crmCase);
+        }catch(TechnicalException e){
+            if(ConstraintViolationException.class.equals(e.getCause().getClass())){
+                return comunMessageBundle.getString(CommonMessages.COMUNMESSAGES_EXCEPTION_SAVE_DUPLICADO);
+            }else{
+                return e.getMessage();
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public String update(CRMCase crmCase) throws TechnicalException {
+        try {
+            crmCasePersister.update(crmCase);
+        }catch(TechnicalException e){
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);
+        }
+        return null;
+    }
+
+    @Override
+    public String delete(CRMCase crmCase) throws TechnicalException {
+        try {
+            crmCasePersister.delete(crmCase);
+        }catch(TechnicalException e){
+            return e.getMessage();
+        }
+        return null;
+    }
+
+    public CRMCasePersister getCRMCasePersister() {
+        return crmCasePersister;
+    }
+
+    public void setCRMCasePersister(CRMCasePersister crmCasePersister) {
+        this.crmCasePersister = crmCasePersister;
+    }
+
+    public String sendInfoToCRM(CRMCase crmCase){
+        StringBuilder error = new StringBuilder();
+        try {
+            EventNotificationWorker notificationWorker = new EventNotificationWorkerCRMClaim(error);
+            notificationWorker.setObjectToSendOther(crmCase);
+            notificationWorker.start();
+            notificationWorker.join();  // Es sincrono segun el requerimiento para mostrar si fallo y enviar un mensaje al Front
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+            error.append("Error al Procesar el EventNotificationWorker, "+e.getMessage());
+        }
+        return error.length() > 0 ? error.toString() : null;
+    }
+
+}
Index: ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-987-CREATE_EXT_CRMOPENITEM.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-987-CREATE_EXT_CRMOPENITEM.sql	(revision )
+++ ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-987-CREATE_EXT_CRMOPENITEM.sql	(revision )
@@ -0,0 +1,33 @@
+CREATE TABLE EXT_CRMOPENITEM
+(
+  CRMNUMBER       VARCHAR2(100 BYTE)            NOT NULL,
+  OPMID    NUMBER(19)
+);
+
+COMMENT ON TABLE EXT_CRMOPENITEM IS 'Saves Relation between CRM Case and Opentitem, related to tables: EXT_CRM_CASE, OPENITEM';
+COMMENT ON COLUMN EXT_CRMOPENITEM.CRMNUMBER IS 'CRM Cases Log Identifier, Primary key, Foreign key, Source Table EXT_CRMCASE';
+COMMENT ON COLUMN EXT_CRMOPENITEM.OPMID IS 'Openitem Identifier, Primary key, Foreign key, Source Table OPENITEM';
+
+CREATE UNIQUE INDEX PK_ECRMO ON EXT_CRMOPENITEM (CRMNUMBER,OPMID) LOGGING;
+
+ALTER TABLE EXT_CRMOPENITEM ADD (
+  CONSTRAINT PK_ECRMO
+  PRIMARY KEY
+  (CRMNUMBER,OPMID)
+  USING INDEX PK_ECRMO
+  ENABLE VALIDATE);
+
+ALTER TABLE EXT_CRMOPENITEM ADD (
+  CONSTRAINT FK_ECRMO_CRMNUMBER
+  FOREIGN KEY (CRMNUMBER)
+  REFERENCES EXT_CRMCASE (CRMNUMBER)
+  ENABLE VALIDATE);
+
+ALTER TABLE EXT_CRMOPENITEM ADD (
+  CONSTRAINT FK_ECRMO_OPMID
+  FOREIGN KEY (OPMID)
+  REFERENCES OPENITEM (OPENITEMID)
+  ENABLE VALIDATE);
+
+INSERT INTO STMA_TABLEINFORMATION VALUES ('EXT_CRMOPENITEM', 'EXT_CRMOPENITEM', 'ECRMOI', 'CL', 'Saves Relation between CRM Case and Opentitem, related to tables: EXT_CRMCASE, OPENITEM');
+COMMIT;
\ No newline at end of file
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/ClientCrmAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/ClientCrmAction.java	(revision )
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/ClientCrmAction.java	(revision )
@@ -0,0 +1,69 @@
+package com.consisint.acsele.workflow.claimInterfaces.actions;
+
+import com.consisint.acsele.util.ClientRequest;
+import com.consisint.acsele.util.ClientResponse;
+import com.consisint.acsele.util.context.CRMInternalServices;
+import com.consisint.acsele.util.error.ApplicationException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+import com.consisint.acsele.workflow.claimapi.Claim;
+import com.consisint.acsele.workflow.claimapi.ClaimComposer;
+import com.consisint.acsele.workflow.claimapi.ClaimSessionUtil;
+import org.apache.struts.action.ActionForm;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.ActionMapping;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Created by lmarin on 2/2/17.
+ */
+public class ClientCrmAction extends GenericAction {
+    private static final AcseleLogger log = AcseleLogger.getLogger(ClientCrmAction.class);
+
+    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
+                                 HttpServletResponse response)
+            throws IOException, ServletException {
+
+        super.execute(mapping, form, request, response);
+
+        String typeAssociation      = request.getParameter("typeAssociation");
+        String groupName1      = request.getParameter("groupName1");
+        String groupName2      = request.getParameter("groupName2");
+        String formName        = request.getParameter("formName");
+        String plantilla        = request.getParameter("plantilla");
+
+        long policyId = ((Claim) request.getSession().getAttribute("Claim")).getPolicy().getPolicyPk();
+
+        // llama al servicio para asociarlo
+        CRMInternalServices crmServices = CRMInternalServices.Impl.getInstance();
+        if(crmServices != null) request = crmServices.processExecuteCrm(policyId,request);
+
+        request.setAttribute("typeAssociation", typeAssociation);
+        request.setAttribute("groupName1", groupName1);
+        request.setAttribute("groupName2", groupName2);
+        request.setAttribute("formName", formName);
+        request.setAttribute("plantilla",plantilla);
+
+        return mapping.findForward("success");
+
+    }
+
+    /**
+     * Process the execute method of ClaimComposer
+     * @param request
+     * @return ClientResponse
+     */
+    public static void updateCrm(String crmNumber, String operationId, String associationType) {
+        // llama al servicio para asociarlo
+        CRMInternalServices crmServices = CRMInternalServices.Impl.getInstance();
+        if(crmServices != null) crmServices.processUpdateCrm(crmNumber, operationId, associationType);
+    }
+
+}
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/persistent/managers/AggregatedManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/persistent/managers/AggregatedManager.java	(revision 49180)
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/persistent/managers/AggregatedManager.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/CRMOpenItemPersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/CRMOpenItemPersister.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/CRMOpenItemPersister.java	(revision )
@@ -0,0 +1,48 @@
+package com.consisint.acsele.interseguro.interfaces.crm.persister;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMOpenItem;
+import com.consisint.acsele.util.BeanFactory;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+
+import java.util.List;
+
+/**
+ * Created by Darwin on 24/01/2017.
+ */
+public interface CRMOpenItemPersister {
+
+    List<CRMOpenItem> loadByCRMNumber(String crmNumber) throws TechnicalException;
+
+    void save(CRMOpenItem crmCase);
+
+    void update(CRMOpenItem crmCase);
+
+    void delete(CRMOpenItem crmCase);
+
+    int countAll() throws TechnicalException;
+
+    class Impl {
+        private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+        private static final CRMOpenItemPersister persister = getBean();
+
+        private static CRMOpenItemPersister getBean(){
+            try{
+                return (CRMOpenItemPersister) BeanFactory.getBean(CRMOpenItemPersister.class);
+            } catch (Throwable e){
+                log.error("[CRMOpenItemPersister] ", e);
+                return null;
+            }
+        }
+
+        public static CRMOpenItemPersister getInstance() {
+            return persister;
+        }
+
+    }
+
+    CRMOpenItem loadByOpmId(long opmId);
+
+}
+
+
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/claim/bean/ClaimSearchParameters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/claim/bean/ClaimSearchParameters.java	(revision 49180)
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/claim/bean/ClaimSearchParameters.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/LoadClaimAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/LoadClaimAction.java	(revision 49180)
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/LoadClaimAction.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/LogCRMCaseServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/LogCRMCaseServiceImpl.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/LogCRMCaseServiceImpl.java	(revision )
@@ -0,0 +1,80 @@
+package com.consisint.acsele.interseguro.interfaces.crm.impl;
+
+import com.consisint.acsele.UserInfo;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.LogCRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.impl.services.LogCRMCaseService;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.LogCRMCasePersister;
+import com.consisint.acsele.util.CommonMessages;
+import com.consisint.acsele.util.error.ApplicationException;
+import com.consisint.acsele.util.error.Exceptions;
+import com.consisint.acsele.util.error.TechnicalException;
+import net.sf.hibernate.exception.ConstraintViolationException;
+
+import java.util.List;
+import java.util.ResourceBundle;
+
+import static com.consisint.acsele.util.CommonMessages.COMUNMESSAGES;
+
+/**
+ * Title: LogCRMCaseImpl.java <br>
+ * Copyright: (c) 2017 Consis International<br>
+ * Company: Consis International<br>
+ *
+ * @author Consis International (CON)
+ * @author Darwin Palma (DP)
+ * @version Acsel-e
+ */
+public class LogCRMCaseServiceImpl implements LogCRMCaseService {
+
+    private LogCRMCasePersister logCRMCasePersister;
+
+    private ResourceBundle comunMessageBundle = ResourceBundle.getBundle(COMUNMESSAGES, UserInfo.getLocale());
+
+    @Override
+    public List<LogCRMCase> load(LogCRMCase crmCase) throws ApplicationException, TechnicalException {
+        return logCRMCasePersister.loadByCRMNumber(crmCase.getCrmNumber());
+    }
+
+    @Override
+    public String create(LogCRMCase crmCase) throws TechnicalException {
+        try {
+            logCRMCasePersister.save(crmCase);
+        }catch(TechnicalException e){
+            if(ConstraintViolationException.class.equals(e.getCause().getClass())){
+                return comunMessageBundle.getString(CommonMessages.COMUNMESSAGES_EXCEPTION_SAVE_DUPLICADO);
+            }else{
+                return e.getMessage();
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public String update(LogCRMCase crmCase) throws TechnicalException {
+        try {
+            logCRMCasePersister.update(crmCase);
+        }catch(TechnicalException e){
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);
+        }
+        return null;
+    }
+
+    @Override
+    public String delete(LogCRMCase crmCase) throws TechnicalException {
+        try {
+            logCRMCasePersister.delete(crmCase);
+        }catch(TechnicalException e){
+            return e.getMessage();
+        }
+        return null;
+    }
+
+    public LogCRMCasePersister getLogCRMCasePersister() {
+        return logCRMCasePersister;
+    }
+
+    public void setLogCRMCasePersister(LogCRMCasePersister logCRMCasePersister) {
+        this.logCRMCasePersister = logCRMCasePersister;
+    }
+
+}
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/thirdparty/action/ThirdPartyFindAddressAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/thirdparty/action/ThirdPartyFindAddressAction.java	(revision 49183)
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/thirdparty/action/ThirdPartyFindAddressAction.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/workers/EventNotificationWorkerCRMClaim.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/workers/EventNotificationWorkerCRMClaim.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/workers/EventNotificationWorkerCRMClaim.java	(revision )
@@ -0,0 +1,230 @@
+package com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.workers;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMOpenItem;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.LogCRMCasePersister;
+import com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.EventNotificationWorker;
+import com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.enums.StatusAssociationTypeCRM;
+import com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.enums.StatusCRM;
+import com.consisint.acsele.util.AcseleConf;
+import com.consisint.acsele.util.HttpUtil;
+import com.consisint.acsele.util.StringUtil;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+import com.google.gson.Gson;
+import com.google.gson.annotations.SerializedName;
+
+import javax.ws.rs.core.MediaType;
+import java.util.*;
+
+/**
+ * La clase <code>EventNotificationWorkerCRMClaim</code> es el encargado de enviar la notificacion de actualizacion al Sistema CRM
+ */
+public class EventNotificationWorkerCRMClaim extends EventNotificationWorker {
+    private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+    static String requestURL;
+    private final StringBuilder errorOut;
+    EventNotificacionCRMClaim parameter;
+    public static String messageResponse;
+
+    public EventNotificationWorkerCRMClaim(StringBuilder error) {
+        super();
+        this.errorOut = error;
+    }
+
+    public static String getMessageResponse() {
+        return messageResponse;
+    }
+
+    public static void setMessageResponse(String messageResponse) {
+        EventNotificationWorkerCRMClaim.messageResponse = messageResponse;
+    }
+
+    @Override
+    public void run() {
+        final Gson gson = new Gson();
+        String jsonOut = gson.toJson(parameter);
+        String jsonIn = null;
+        StatusCRM statusCRM = StatusCRM.SENT_ERROR;
+        EventNotificacionCRMClaimResponse responseJSON = null;
+        try {
+            responseJSON = EventNotificationCRMCallWeb.processEventNotification(jsonOut);
+            isReceived = responseJSON.isReceived;
+            if(isReceived){ statusCRM = StatusCRM.SENT_OK; msg = statusCRM.name(); }  else{ statusCRM = StatusCRM.SENT_ERROR; msg = statusCRM.name(); }
+        } catch (Exception e) {
+            log.error(e);
+            isReceived = false;
+            msg = ""+e.getMessage();
+            responseJSON = new EventNotificacionCRMClaimResponse(false, msg);
+        } finally {
+            jsonIn = responseJSON != null ? gson.toJson(responseJSON, EventNotificacionCRMClaimResponse.class) : "{\"msg\":\"Esto es un error no Capturado verificar a EventNotificationWorkerCRMClaim.class \"}";
+            setMessageResponse(msg); // Cuando se implemente al modulo de Notificaciones
+            registerLogInner(parameter.numerocaso, new Date(System.currentTimeMillis()), statusCRM.getDescription(), jsonIn, jsonOut);
+            if(!isReceived) errorOut.append(msg);
+        }
+    }
+
+    private void registerLogInner(String nroCaso, Date date, String movementStatus, String jsonIn, String jsonOut) {
+        try {
+            LogCRMCasePersister.Impl.createNew(nroCaso, date, movementStatus, jsonIn, jsonOut);
+        } catch (Throwable e) {
+            e.printStackTrace();
+        }
+        // super.registerLog(); Esto cuando se implemente con el modulo de Notificaciones y la tabla anterior no sera necesaria
+        //if(log.isDebugEnabled()) log.debug("[EventNotificationWorkerCRMClaim] Ejecutado Notificacion "+notificacionEvent.toString()+", "+this.toString());    // Esto cuando se implemente con el modulo de Notificaciones y la tabla anterior no sera necesaria y se tenga una notificacion configurada
+    }
+
+    @Override
+    public void setObjectToSendOther(Object objectInfo) {
+        if(objectInfo instanceof CRMCase){
+            createDataToSend((CRMCase) objectInfo);
+        }
+    }
+/*
+//    @Override
+    public void setObjectToSendPol(CasoCRMData objectToSendCRM) {
+        try {
+//            super.setObjectToSendPol(objectToSendPol);
+            createDataToSend(objectToSendCRM);
+            if(log.isDebugEnabled()) log.debug("[EventNotificationWorkerCRMClaim] Se enviara a Ejecutar la Notificacion "+notificacionEvent.toString()+", "+this.toString());
+            getRequestURL();
+        } catch (Exception e) {
+            msg = "No se pudo enviar la Notificacion hacia el CRM evento: " + this.notificacionEvent.getEventName();
+            super.registerLog();
+            log.error(e);
+        }
+    }
+*/
+
+    private void createDataToSend(CRMCase objectToSendCRM) {
+        final String numerocaso = objectToSendCRM.getCrmNumber();
+        final Long siniestro = objectToSendCRM.getClaimId();
+        final Long ccvId = objectToSendCRM.getCcvId();
+        final String ccvName = StringUtil.defaultIfEmpty(objectToSendCRM.getCcvName(), StringUtil.EMPTY_STRING);
+        final Long idCarta = objectToSendCRM.getHltId();
+        final String numerocarta = StringUtil.defaultIfEmpty(objectToSendCRM.getLetterName(), StringUtil.EMPTY_STRING);
+        Integer associationType = objectToSendCRM.getAssociationType();
+        if(associationType == null) throw new TechnicalException("Objeto CRMCase es invalido debe poseer un tipo de Asociacion!!!!!!!!!!!!");
+        String tipoAsociacion = StatusAssociationTypeCRM.getIntanceByValue(associationType).getDescription();
+        final Set<CRMOpenItem> crmOpenItems = objectToSendCRM.getCrmOpenItems();
+        List<Long> ioIds = new ArrayList<Long>();
+        if(crmOpenItems !=null && !crmOpenItems.isEmpty()){
+            for (CRMOpenItem crmCaseMovement : crmOpenItems) ioIds.add(crmCaseMovement.getPk().getOpmId());
+        }
+        String fechacarta = "";
+        String fechacartaaprob = "";
+        String numeromemo = "";
+        String montomemo = "";
+        parameter = new EventNotificacionCRMClaim(numerocaso, ioIds, siniestro, ccvName, tipoAsociacion, numerocarta, fechacarta, fechacartaaprob, numeromemo, montomemo);
+        this.mutsBeRun = true;
+    }
+
+
+    public static String getRequestURL(){
+        if(requestURL == null){ requestURL = AcseleConf.getPropertyOrDefault("url.notificaCRM","http://130.30.11.62:8089/wsMasterCRM/ServiceMasterCRM.svc/rest/ActualizarCasoSiniestroCRM"); }
+        return requestURL;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder retorno = new StringBuilder("EventNotificationWorkerCRMClaim{" + "class: "+this.getClass().getSimpleName()+ ", isReceived: " + isReceived + (StringUtil.isEmpty(msg)?"":", msg: '" + msg + '\''));
+        if(parameter != null) retorno.append(", parametro: ").append(parameter.toString());
+        return retorno.append("}").toString();
+    }
+
+/*********************************************************************************************************************/
+    static class EventNotificacionCRMClaim {
+        @SerializedName("numerocaso")
+        public String numerocaso;           //Es el número de caso del CRM enviado en el Servicio A (campo Número Caso CRM)
+        @SerializedName("openitem")
+        public List<Long> openitem;       //Es el número del openitem asociado al pago
+        @SerializedName("siniestro")
+        public Long siniestro;              //Es el número de reclamo que se está asociando al número de caso del CRM
+        @SerializedName("cobertura")
+        public String cobertura;              //Nombre de la Cobertura a la que se realizará el pago
+        @SerializedName("tipocarta")
+        public String tipocarta;              /*Origen desde donde se llama al servicio: AP: Aprobar Pago (al seleccionar la cobertura y dar click en Aceptar) RS: Rechazar Siniestro (al seleccionar el objeto afectado es el botón Rechazar del menú) RC: Rechazar Cobertura (al seleccionar la cobertura es el botón Rechazar del menú) RR: Rechazar Caso por Carta de Requisito (al seleccionar la cobertura es el botón Requisitos del menú)*/
+        @SerializedName("numerocarta")
+        public String numerocarta;              //Numero de carta
+        @SerializedName("fechacarta")
+        public String fechacarta;              //Datos de la carta de rechazo (aplica para origen RS, RC y RR)
+        @SerializedName("fechacartaaprob")
+        public String fechacartaaprob;              //Enviar en blanco. No aplica para masivos.
+        @SerializedName("numeromemo")
+        public String numeromemo;              //Enviar en blanco. No aplica para masivos.
+        @SerializedName("montomemo")
+        public String montomemo;              //Datos del memorándum de pago (aplica para origen AP).
+
+        public EventNotificacionCRMClaim(String numerocaso ,
+                                         List<Long> openitem ,
+                                         Long siniestro ,
+                                         String cobertura ,
+                                         String tipocarta ,
+                                         String numerocarta ,
+                                         String fechacarta ,
+                                         String fechacartaaprob ,
+                                         String numeromemo ,
+                                         String montomemo) {
+            this.numerocaso = numerocaso;
+            this.openitem = openitem;
+            this.siniestro = siniestro;
+            this.cobertura = cobertura;
+            this.tipocarta = tipocarta;
+            this.numerocarta = numerocarta;
+            this.fechacarta = fechacarta;
+            this.fechacartaaprob = fechacartaaprob;
+            this.numeromemo = numeromemo;
+            this.montomemo = montomemo;
+        }
+
+        @Override
+        public String toString() {
+            return "\"EventNotificacionCRMClaim\":"+new Gson().toJson(this);
+        }
+    }
+
+    static class EventNotificacionCRMClaimResponse{
+        boolean isReceived;
+        String msg;
+
+        public EventNotificacionCRMClaimResponse(boolean isReceived, String msg) {
+            this.isReceived = isReceived;
+            this.msg = msg;
+        }
+
+        @Override
+        public String toString() {
+            return "EventNotificacionCRMClaimResponse{" +
+                    "isReceived=" + isReceived +
+                    ", msg='" + msg + '\'' +
+                    '}';
+        }
+    }
+
+    static class EventNotificationCRMCallWeb{
+        private final static String JSON_NAMEOUT = "jsonActualizarCasoSiniestroCRM";
+        private final static String JSON_NAMEIN = "responseJSON";
+        private final static String REQ_METHOD = "POST";
+        private static final String POSTFIX_TEST_ = "Object";
+
+
+        public static EventNotificacionCRMClaimResponse processEventNotification(String jsonOut) throws Exception {
+            EventNotificacionCRMClaimResponse response = sendToWebService(jsonOut, MediaType.APPLICATION_JSON);
+            return response;
+        }
+
+        private static EventNotificacionCRMClaimResponse sendToWebService(String outSend, String mediatype) throws Exception {
+            String inJSON = sendRequestRaw(outSend);
+            final EventNotificacionCRMClaimResponse response = new Gson().fromJson(inJSON, EventNotificacionCRMClaimResponse.class);
+            return response;
+        }
+
+        private static String sendRequestRaw(String jsonOut) throws Exception {
+            Map<String, String> outMap = new HashMap<String, String>(); outMap.put(JSON_NAMEOUT, jsonOut);
+            Map<String, String> headerMap = new HashMap<String, String>();
+            headerMap.put("Content-Type", "application/json;charset=utf-8");
+            headerMap.put("Accept", "application/json");
+            return HttpUtil.executePostURLJSONRawContent(EventNotificationWorkerCRMClaim.getRequestURL()/*+POSTFIX_TEST_*/, headerMap, outMap);
+        }
+    }
+}
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/PK.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/PK.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/entity/PK.java	(revision )
@@ -0,0 +1,54 @@
+package com.consisint.acsele.interseguro.interfaces.crm.entity;
+
+import java.io.Serializable;
+
+/**
+ * Created by Julio on 03/02/2017.
+ */
+public class PK implements Serializable {
+    private static final long serialVersionUID = -1848694082747088883L;
+    private CRMCase crmCase;
+    private Long opmId;
+
+    public PK() {
+    }
+
+    public PK(CRMCase crmCase, Long opmId) {
+        this.crmCase = crmCase;
+        this.opmId = opmId;
+    }
+
+    public CRMCase getCrmCase() {
+        return crmCase;
+    }
+
+    public void setCrmCase(CRMCase crmCase) {
+        this.crmCase = crmCase;
+    }
+
+    public Long getOpmId() {
+        return opmId;
+    }
+
+    public void setOpmId(Long opmId) {
+        this.opmId = opmId;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = 13;
+        long longField = opmId.longValue();
+        result = 31 * result + crmCase.hashCode();
+        result = 31 * result + (int) (longField ^ (longField >>> 32));
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        PK pk = (PK) o;
+        if (!crmCase.equals(pk.crmCase)) return false;
+        return opmId.equals(pk.opmId);
+    }
+}
Index: ../Application/Core/resources/db/AcseleV13.0.0/translations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/db/AcseleV13.0.0/translations.xml	(revision 49207)
+++ ../Application/Core/resources/db/AcseleV13.0.0/translations.xml	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/util/context/CRMInternalServices.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/util/context/CRMInternalServices.java	(revision )
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/util/context/CRMInternalServices.java	(revision )
@@ -0,0 +1,46 @@
+package com.consisint.acsele.util.context;
+
+import com.consisint.acsele.document.letter.Letter;
+import com.consisint.acsele.uaa.OpenItem;
+import com.consisint.acsele.util.BeanFactory;
+import com.consisint.acsele.workflow.claimapi.Claim;
+import com.consisint.acsele.workflow.claimapi.ClaimComposer;
+
+import javax.servlet.http.HttpServletRequest;
+import java.util.Hashtable;
+
+/**
+ * Created by ext.dpalma on 22/02/2017.
+ */
+public interface CRMInternalServices {
+    String processClaimComposer(Claim claim, OpenItem openItem);
+
+    String processThirdParty(String claimId);
+
+    void processThirdPartyPublish(String claimId, Letter letterToSend);
+
+    void processEditClaimObjectAction(ClaimComposer composer);
+
+    Hashtable processLoadRefuseReserveAction(String claimId, Hashtable dataFormHashtable);
+
+    void processAccountAction(String claimId);
+
+    void processSetStateWithData(String claimId);
+
+    void processUpdateCrm(String crmNumber, String operationId, String associationType);
+
+    HttpServletRequest processExecuteCrm(long policyId, HttpServletRequest request);
+
+    String processClientCRMUpdateAction(String crmNumber, String associationType, Long claimID, Long coverageId);
+
+    class Impl{
+        public static CRMInternalServices getInstance(){
+            try {
+                CRMInternalServices bean = (CRMInternalServices) BeanFactory.getBean(CRMInternalServices.class);
+                return bean;
+            } catch (Throwable e) {
+                return null;
+            }
+        }
+    }
+}
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/LogCRMCaseHibernatePersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/LogCRMCaseHibernatePersister.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/LogCRMCaseHibernatePersister.java	(revision )
@@ -0,0 +1,145 @@
+package com.consisint.acsele.interseguro.interfaces.crm.persister.hibernate_persister;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.LogCRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.LogCRMCasePersister;
+import com.consisint.acsele.persistence.hibernate.AcseleHibernateSessionProvider;
+import com.consisint.acsele.persistent.IDDBFactory;
+import com.consisint.acsele.util.StringUtil;
+import com.consisint.acsele.util.error.Exceptions;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+import net.sf.hibernate.Criteria;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.ObjectNotFoundException;
+import net.sf.hibernate.Session;
+import net.sf.hibernate.expression.Expression;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * Created by ext.dpalma on 24/01/2017.
+ */
+public class LogCRMCaseHibernatePersister implements LogCRMCasePersister {
+    private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+    //private boolean isCaching;
+
+    private LogCRMCaseHibernatePersister() {
+    }
+
+    @Override
+    public List<LogCRMCase> loadByElCRMId(long elCRMId) throws TechnicalException {
+        if (elCRMId <= 0) throw new TechnicalException(Exceptions.HSErrorLoadingObject, new Exception("Invalid Value - Id"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            return (List<LogCRMCase>) session.load(LogCRMCase.class, elCRMId);
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    @Override
+    public List<LogCRMCase> loadByCRMNumber(String crmNumber) throws TechnicalException {
+        try {
+//            return  (LogCRMCase) AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession().load(LogCRMCase.class, crmNumber);
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(LogCRMCase.class);
+            crit.add(Expression.eq("crmNumber", crmNumber));
+            return new ArrayList<LogCRMCase>(crit.list());
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    /*@Override
+    public CRMCase loadByPolicyId(int policyId) throws TechnicalException {
+        try {
+            Session session = HibernateUtil.getSession();
+            Criteria crit = session.createCriteria(InterfaceSystem.class);
+            crit.add(Expression.eq("policyId", policyId));
+            return (CRMCase) crit.uniqueResult();
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }*/
+
+    @Override
+    public void save(LogCRMCase logCRMCase){
+        if (logCRMCase == null)  throw new TechnicalException(Exceptions.HSErrorSavingObject, new Exception("Invalid Value CRM IS NULL"));
+        try {
+            logCRMCase.setElCRMId(IDDBFactory.getNextIDL("EXT_CRMCASE"));
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.save(logCRMCase);
+            session.flush();
+            session.evict(logCRMCase);
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);}
+    }
+
+    public void update(LogCRMCase logCRMCase) throws TechnicalException {
+        if (logCRMCase == null) {
+            throw new TechnicalException(Exceptions.HSErrorSavingObject,
+                    new Exception("Invalid Value CRM IS NULL"));
+        }
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.update(logCRMCase);
+            session.flush();
+            session.evict(logCRMCase);
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);}
+    }
+    //
+    public void delete(LogCRMCase logCRMCase) throws TechnicalException {
+        if (logCRMCase == null || StringUtil.isEmpty(logCRMCase.getCrmNumber())) throw new TechnicalException(Exceptions.HSErrorDeletingObject, new Exception("Invalid Value CRM IS NULL"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.delete(logCRMCase);
+            session.flush();
+            session.evict(logCRMCase);
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorDeletingObject, e);
+        }
+    }
+
+    @Override
+    public int countAll() throws TechnicalException {
+        return 0;
+    }
+
+    @Override
+    public void deleteByCRMCase(CRMCase o) {
+        try {
+            final List<LogCRMCase> logCRMCases = loadByCRMNumber(o.getCrmNumber());
+            for (LogCRMCase logCRMCase : logCRMCases) {
+                delete(logCRMCase);
+            }
+        } catch (TechnicalException e) {
+            e.printStackTrace();
+        }
+    }
+
+}
Index: ../Application/Core/resources/db/AcseleV13.0.0/systemproperties.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/db/AcseleV13.0.0/systemproperties.xml	(revision 49183)
+++ ../Application/Core/resources/db/AcseleV13.0.0/systemproperties.xml	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/ClientCrmUpdateAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/ClientCrmUpdateAction.java	(revision )
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/ClientCrmUpdateAction.java	(revision )
@@ -0,0 +1,51 @@
+package com.consisint.acsele.workflow.claimInterfaces.actions;
+
+import com.consisint.acsele.util.context.CRMInternalServices;
+import com.consisint.acsele.util.logging.AcseleLogger;
+import com.consisint.acsele.workflow.claimInterfaces.forms.SearchBean;
+import org.apache.struts.action.ActionForm;
+import org.apache.struts.action.ActionForward;
+import org.apache.struts.action.ActionMapping;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.*;
+
+/**
+ * Created by lmarin on 2/2/17.
+ */
+public class ClientCrmUpdateAction extends GenericAction {
+    private static final AcseleLogger log = AcseleLogger.getLogger(ClientCrmUpdateAction.class);
+
+    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
+                                 HttpServletResponse response)
+            throws IOException, ServletException {
+
+        super.execute(mapping, form, request, response);
+        String associationType      = request.getParameter("typeAssociation");
+        String crmNumber      = request.getParameterValues("listCRM")[1];
+        request.getSession().setAttribute("listCRM", crmNumber);
+        Long claimID = 0L;
+        Long coverageId = 0L;
+        if(request.getSession().getAttribute("claimId")!=null){
+            claimID = Long.parseLong(String.valueOf(request.getSession().getAttribute("claimId")));
+        }
+        if(((SearchBean)((Vector)request.getSession().getAttribute("covAffecteds")).get(0)).getEvaluatedCoverage().getConfiguratedCoverage().getPk()!=null){
+            coverageId = Long.parseLong(String.valueOf(((SearchBean)((Vector)request.getSession().getAttribute("covAffecteds")).get(0)).getEvaluatedCoverage().getConfiguratedCoverage().getPk()));
+        }
+        String error = null;
+        // llama al servicio para asociarlo
+        CRMInternalServices crmServices = CRMInternalServices.Impl.getInstance();
+        if(crmServices != null) error = crmServices.processClientCRMUpdateAction(crmNumber, associationType, claimID, coverageId);
+
+        if(error != null){
+            response.getWriter().write(error);
+        }
+
+        return null;
+    }
+
+
+}
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/ClientInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/ClientInfo.java	(revision )
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/ClientInfo.java	(revision )
@@ -0,0 +1,18 @@
+package com.consisint.acsele;
+
+import com.consisint.acsele.util.AcseleConf;
+import com.consisint.acsele.util.StringUtil;
+
+/**
+ * Created by ext.dpalma on 04/02/2017.
+ */
+public class ClientInfo {
+    static final String clientsRunningName = AcseleConf.getProperty("clientsRunning");
+
+    public static boolean isClientRunning(String clientName){
+        return !StringUtil.isEmpty(clientsRunningName) && clientsRunningName.equals(clientName);
+    }
+    public static String getClientRunning(String clientName){
+        return clientsRunningName;
+    }
+}
Index: ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-985-CREATE_EXT_CRMCASE.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-985-CREATE_EXT_CRMCASE.sql	(revision )
+++ ../Application/Core/resources/db/AcseleV13.0.0/scripts/1300-985-CREATE_EXT_CRMCASE.sql	(revision )
@@ -0,0 +1,63 @@
+CREATE TABLE EXT_CRMCASE
+(
+  CRMNUMBER        VARCHAR2(100 BYTE)           NOT NULL,
+  POLICYID         NUMBER(19)                   NOT NULL,
+  POLICYNUMBER     VARCHAR2(150 BYTE)           NOT NULL,
+  MEDIUMANSWER     VARCHAR2(1 BYTE)             NOT NULL,
+  STATUS           NUMBER(1)                    DEFAULT 2                     NOT NULL,
+  ASSOCIATIONTYPE  NUMBER(1),
+  CLAIMID          NUMBER(19),
+  CCVID            NUMBER(19),
+  HLT_ID           NUMBER(19)
+)
+;
+
+COMMENT ON TABLE EXT_CRMCASE IS 'Saves CRM Cases to Interfaz, related to tables: AGREGATEDPOLICY, CLAIM, EVALUATEDCOVERAGE, STCL_HISTORYLETTER';
+
+COMMENT ON COLUMN EXT_CRMCASE.CRMNUMBER IS 'PK - CRM Cases, Primary Key';
+
+COMMENT ON COLUMN EXT_CRMCASE.POLICYID IS 'FK - Policy Identifier, Foreign Key, Source Table AGREGATEDPOLICY';
+
+COMMENT ON COLUMN EXT_CRMCASE.POLICYNUMBER IS 'Policy Number';
+
+COMMENT ON COLUMN EXT_CRMCASE.MEDIUMANSWER IS 'Medium Answer, (E) Electronic, (F) Physical';
+
+COMMENT ON COLUMN EXT_CRMCASE.STATUS IS 'Status of CRM Case, RECD_CREATE(2), RECD_UPDATE(3), SENT_OK(4), SENT_ERROR(6), RECD_ERROR(7)';
+
+COMMENT ON COLUMN EXT_CRMCASE.ASSOCIATIONTYPE IS 'Type of Association, 1 (Payment Approve), 2 (Claim Refuse) , 3 (Coverage Refuse), 4 (Requisite Refuse)';
+
+COMMENT ON COLUMN EXT_CRMCASE.CLAIMID IS 'FK - Claim Identifier, Foreign Key, Source Table CLAIM';
+
+COMMENT ON COLUMN EXT_CRMCASE.CCVID IS 'FK - Coverage Identifier, Foreign Key, Source Table EVALUATEDCOVERAGE';
+
+COMMENT ON COLUMN EXT_CRMCASE.HLT_ID IS 'FK - Historical Letter Identifier, Foreign Key, Source Table STCL_HISTORYLETTER';
+
+CREATE UNIQUE INDEX PK_ECRM ON EXT_CRMCASE (CRMNUMBER) LOGGING ;
+
+ALTER TABLE EXT_CRMCASE ADD (
+  CONSTRAINT PK_ECRM
+  PRIMARY KEY
+  (CRMNUMBER)
+  USING INDEX PK_ECRM
+  ENABLE VALIDATE);
+
+ALTER TABLE EXT_CRMCASE ADD (
+  CONSTRAINT FK_ECRM_CCVID FOREIGN KEY (CCVID)
+  REFERENCES CONFIGURATEDCOVERAGE (CONFIGURATEDCOVERAGEID)
+  ENABLE VALIDATE,
+  CONSTRAINT FK_ECRM_CLAIMID FOREIGN KEY (CLAIMID)
+  REFERENCES CLAIM (CLAIMID)
+  ENABLE VALIDATE,
+  CONSTRAINT FK_ECRM_HLTID FOREIGN KEY (HLT_ID)
+  REFERENCES STRP_LETTERHISTORY (HLT_ID)
+  ENABLE VALIDATE,
+  CONSTRAINT FK_ECRM_POLICYID FOREIGN KEY (POLICYID)
+  REFERENCES AGREGATEDPOLICY (AGREGATEDPOLICYID)
+  ENABLE VALIDATE);
+
+CREATE SEQUENCE SQ_EXT_CRMCASE START WITH 1
+MAXVALUE 9999999999999999999999999999
+MINVALUE 0 NOCYCLE NOCACHE NOORDER;
+
+INSERT INTO STMA_TABLEINFORMATION VALUES ('EXT_CRMCASE', NULL, 'XECRM', 'EXT', 'Tabla Intermedia de Casos CRM.');
+COMMIT;
\ No newline at end of file
Index: ../Application/Core/resources/LogCRMCase.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/LogCRMCase.hbm.xml	(revision )
+++ ../Application/Core/resources/LogCRMCase.hbm.xml	(revision )
@@ -0,0 +1,18 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 2.0//EN"
+        "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd">
+<hibernate-mapping>
+    <class
+        name="com.consisint.acsele.interseguro.interfaces.crm.entity.LogCRMCase"
+        table="EXT_LOGCRMCASE">
+        <id name="elCRMId" column="ELCRMID" unsaved-value="null">
+            <generator class="assigned"/>
+        </id>
+        <property name="crmNumber" column="CRMNUMBER"/>
+        <property name="movementDate" column="MOVEMENTDATE" type="date"/>
+        <property name="movementStatus" column="MOVEMENTSTATUS"/>
+        <property name="jsonIn" column="JSONIN"/>
+        <property name="jsonOut" column="JSONOUT"/>
+    </class>
+</hibernate-mapping>
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/enums/StatusCRM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/enums/StatusCRM.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/intermedia/event/Notification/services/enums/StatusCRM.java	(revision )
@@ -0,0 +1,42 @@
+package com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.enums;
+
+import com.consisint.acsele.UserInfo;
+
+import java.util.ResourceBundle;
+
+/**
+ * Created by ext.dpalma on 27/01/2017.
+ */
+public enum StatusCRM {
+    // Applied Operation: After applying an crm
+    RECD_CREATE(2, "crm.created"),
+    RECD_UPDATE(3, "crm.updated"),
+    SENT_OK(4, "crm.sent"),
+    SENT_ERROR(6, "crm.senterror"), // agregar a bundled
+    RECD_ERROR(7, "crm.error");
+
+    private int value;
+    private String bundled;
+
+    StatusCRM(int value, String bundled) {
+        this.value = value;
+        this.bundled = bundled;
+    }
+
+    public int getValue() {
+        return value;
+    }
+
+    public String getDescription() {
+        return getResourceBundle().getString(bundled);
+    }
+
+    private static ResourceBundle getResourceBundle() {
+        return ResourceBundle.getBundle("PolicyToolMessagesBundle", UserInfo.getLocale());
+    }
+
+    public static StatusCRM getIntanceByValue(int value) {
+        for (StatusCRM o : StatusCRM.values()) if (o.value == value) return o;
+        return null;
+    }
+}
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/services/LogCRMCaseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/services/LogCRMCaseService.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/services/LogCRMCaseService.java	(revision )
@@ -0,0 +1,21 @@
+package com.consisint.acsele.interseguro.interfaces.crm.impl.services;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.LogCRMCase;
+import com.consisint.acsele.util.error.TechnicalException;
+
+import java.util.List;
+
+/**
+ * Created by ext.dpalma on 25/01/2017.
+ */
+public interface LogCRMCaseService {
+
+    List<LogCRMCase> load(LogCRMCase crmCase) throws TechnicalException;
+
+    String create(LogCRMCase crmCase) throws TechnicalException;
+
+    String update(LogCRMCase crmCase) throws TechnicalException;
+
+    String delete(LogCRMCase crmCase) throws TechnicalException;
+
+}
Index: ../Application/Core/resources/db/AcseleV13.0.0/scripts.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/db/AcseleV13.0.0/scripts.xml	(revision 49207)
+++ ../Application/Core/resources/db/AcseleV13.0.0/scripts.xml	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/AccountAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/AccountAction.java	(revision 49183)
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/AccountAction.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/util/evaluator/EvaluationConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/util/evaluator/EvaluationConstants.java	(revision 49180)
+++ ../Application/Core/EJBAcsel-e/src/com/consisint/acsele/util/evaluator/EvaluationConstants.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/services/CRMCaseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/services/CRMCaseService.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/impl/services/CRMCaseService.java	(revision )
@@ -0,0 +1,106 @@
+package com.consisint.acsele.interseguro.interfaces.crm.impl.services;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMOpenItem;
+import com.consisint.acsele.interseguro.interfaces.crm.entity.PK;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.CRMCasePersister;
+import com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.enums.StatusAssociationTypeCRM;
+import com.consisint.acsele.product.server.HistoryDocumentGenerated;
+import com.consisint.acsele.util.BeanFactory;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+
+/**
+ * Created by ext.dpalma on 25/01/2017.
+ */
+public interface CRMCaseService {
+
+    CRMCasePersister getCRMCasePersister();
+
+    CRMCase load(CRMCase crmCase) throws TechnicalException;
+
+    String create(CRMCase crmCase) throws TechnicalException;
+
+    String update(CRMCase crmCase) throws TechnicalException;
+
+    String delete(CRMCase crmCase) throws TechnicalException;
+
+    String sendInfoToCRM(CRMCase crmCase);
+
+    class Impl {
+        private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+        private static CRMCaseService instance = getBean();
+
+        private synchronized static CRMCaseService getBean(){
+            try{
+                return(CRMCaseService) BeanFactory.getBean(CRMCaseService.class);
+            } catch (Throwable e){
+                log.error("[CRMCasePersister] ", e);
+                return null;
+            }
+        }
+
+        public static CRMCaseService getInstance() {
+            return instance == null? instance = getBean() : instance;
+        }
+
+        public static CRMCase loadByCRMNumber(String crmNumber) {
+            return instance.getCRMCasePersister().loadByCRMNumber(crmNumber);
+        }
+
+        public static CRMCase createNew(String numeroCaso, Long idPoliza, String numeroPoliza, String medioRespuesta, int status) {
+            return CRMCasePersister.Impl.createNew(numeroCaso, idPoliza, numeroPoliza, medioRespuesta, status);
+        }
+
+        public static String sendInfoToCRM(CRMCase crmCaseMovement) {
+            return instance.sendInfoToCRM(crmCaseMovement);
+        }
+
+        public static String updateParcial(String crmNumber, String associationType, Long claimId, Long coverageId) {
+            String out = null;
+            try {
+                CRMCasePersister persister = instance.getCRMCasePersister();
+                CRMCase crmCase = persister.loadByCRMNumber(crmNumber);
+                if(crmCase.getAssociationType() != null) throw new Exception("No se puede reasociar un tipo a un CasoCRM ya sociado");
+                crmCase.setAssociationType(StatusAssociationTypeCRM.valueOf(associationType).getValue());
+                if(claimId > 0) crmCase.setClaimId(claimId);
+                if(coverageId > 0) crmCase.setCcvId(coverageId);
+                persister.update(crmCase);
+            } catch (Exception e) {
+                out = e.getMessage();
+                e.printStackTrace();
+            }
+            return out;
+        }
+
+        public static String updateLetter(String crmNumber, Long letterId) {
+            String out = null;
+            try {
+                CRMCasePersister persister = instance.getCRMCasePersister();
+                CRMCase crmCase = persister.loadByCRMNumber(crmNumber);
+                HistoryDocumentGenerated letterHistory = new HistoryDocumentGenerated();
+                if(letterId > 0) crmCase.setHltId(letterId);
+                persister.update(crmCase);
+            } catch (Exception e) {
+                out = e.getMessage();
+                e.printStackTrace();
+            }
+            return out;
+        }
+
+        public static String updateOpenItem(String crmNumber, Long openItemId) {
+            String out = null;
+            try {
+                CRMCasePersister persister = instance.getCRMCasePersister();
+                CRMCase crmCase = persister.loadByCRMNumber(crmNumber);
+                CRMOpenItem openItem = new CRMOpenItem(new PK(crmCase, openItemId));
+                crmCase.getCrmOpenItems().add(openItem);
+                persister.update(crmCase);
+            } catch (Exception e) {
+                out = e.getMessage();
+                e.printStackTrace();
+            }
+            return out;
+        }
+    }
+}
Index: ../Application/Core/resources/DocumentHistory.hbm.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/resources/DocumentHistory.hbm.xml	(revision 49180)
+++ ../Application/Core/resources/DocumentHistory.hbm.xml	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/CRMCaseHibernatePersister.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/CRMCaseHibernatePersister.java	(revision )
+++ ../Application/Core/clienteInterseguro/src/com/consisint/acsele/interseguro/interfaces/crm/persister/hibernate_persister/CRMCaseHibernatePersister.java	(revision )
@@ -0,0 +1,181 @@
+package com.consisint.acsele.interseguro.interfaces.crm.persister.hibernate_persister;
+
+import com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase;
+import com.consisint.acsele.interseguro.interfaces.crm.persister.CRMCasePersister;
+import com.consisint.acsele.persistence.hibernate.AcseleHibernateSessionProvider;
+import com.consisint.acsele.util.StringUtil;
+import com.consisint.acsele.util.error.Exceptions;
+import com.consisint.acsele.util.error.TechnicalException;
+import com.consisint.acsele.util.logging.AcseleLogger;
+import net.sf.hibernate.Criteria;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.ObjectNotFoundException;
+import net.sf.hibernate.Session;
+import net.sf.hibernate.expression.Expression;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * Created by ext.dpalma on 24/01/2017.
+ */
+public class CRMCaseHibernatePersister implements CRMCasePersister {
+    private static final AcseleLogger log = AcseleLogger.getCurrentClassLogger();
+
+    private CRMCaseHibernatePersister() {
+    }
+
+    @Override
+    public List<CRMCase> loadByIdPolicy(long idPolicy) throws TechnicalException {
+        if (idPolicy <= 0) throw new TechnicalException(Exceptions.HSErrorLoadingObject, new Exception("Invalid Value - Id"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMCase.class);
+            crit.add(Expression.eq("policyId", idPolicy));
+            return new ArrayList<CRMCase>(crit.list());
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    @Override
+    public List<CRMCase> loadByIdPolicyAssign(long idPolicy) throws TechnicalException {
+        if (idPolicy <= 0) throw new TechnicalException(Exceptions.HSErrorLoadingObject, new Exception("Invalid Value - Id"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMCase.class);
+            crit.add(Expression.eq("policyId", idPolicy));
+            crit.add(Expression.isNull("associationType"));
+            return new ArrayList<CRMCase>(crit.list());
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    public List<CRMCase> loadByIdPolicyAsociated(long idPolicy) throws TechnicalException {
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMCase.class);
+            crit.add(Expression.eq("policyId", idPolicy));
+            crit.add(Expression.isNotNull("associationType"));
+            return new ArrayList<CRMCase>(crit.list());
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    public CRMCase loadByClaimId(long claimId) throws TechnicalException {
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMCase.class);
+            crit.add(Expression.eq("claimId", claimId));
+            CRMCase caseCRM = (CRMCase) crit.uniqueResult();
+            return caseCRM;
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    @Override
+    public CRMCase loadByCRMNumber(String crmNumber) throws TechnicalException {
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMCase.class);
+            crit.add(Expression.eq("crmNumber", crmNumber));
+            CRMCase caseCRM = (CRMCase) crit.uniqueResult();
+            return caseCRM;
+        } catch (ObjectNotFoundException e) {
+            return null;
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingObject, e);
+        }
+    }
+
+    @Override
+    public void save(CRMCase crmCase){
+        if (crmCase == null)  throw new TechnicalException(Exceptions.HSErrorSavingObject, new Exception("Invalid Value CRM IS NULL"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.save(crmCase);
+            session.flush();
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);
+        }
+    }
+
+    public void update(CRMCase crmCase) throws TechnicalException {
+        if (crmCase == null) throw new TechnicalException(Exceptions.HSErrorSavingObject, new Exception("Invalid Value CRM IS NULL"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.update(crmCase);
+            session.flush();
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorSavingObject, e);
+        }
+    }
+    //
+    public void delete(CRMCase crmCase) throws TechnicalException {
+        if (crmCase == null || StringUtil.isEmpty(crmCase.getCrmNumber()))  throw new TechnicalException(Exceptions.HSErrorDeletingObject, new Exception("Invalid Value CRM IS NULL"));
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            session.delete(crmCase);
+            session.flush();
+            session.evict(crmCase);
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorDeletingObject, e);
+        }
+    }
+
+    @Override
+    public int countAll() throws TechnicalException {
+        return 0;
+    }
+
+    @Override
+    public List<CRMCase> loadAll() throws TechnicalException {
+        try {
+            Session session = AcseleHibernateSessionProvider.getUserDbProvider().getHibernateDbSession();
+            Criteria crit = session.createCriteria(CRMCase.class);
+            return new ArrayList<CRMCase>(crit.list());
+        } catch (HibernateException e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingList, e);
+        } catch (Exception e) {
+            log.error(e);
+            throw new TechnicalException(Exceptions.HSErrorLoadingList, e);
+        }
+    }
+
+}
Index: ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/EditClaimObjectAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/EditClaimObjectAction.java	(revision 49183)
+++ ../Application/Core/WORKFLOW/src/com/consisint/acsele/workflow/claimInterfaces/actions/EditClaimObjectAction.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WControllerWar/web/claimInterfaces/totalizeclaim.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/WControllerWar/web/claimInterfaces/totalizeclaim.jsp	(revision 49180)
+++ ../Application/Web/WControllerWar/web/claimInterfaces/totalizeclaim.jsp	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WebServicesWar/web/WEB-INF/struts/struts-config_portal.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
--- ../Application/Web/WebServicesWar/web/WEB-INF/struts/struts-config_portal.xml	(revision 49180)
+++ ../Application/Web/WebServicesWar/web/WEB-INF/struts/struts-config_portal.xml	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/CustServiceWar/src/com/assurant/celita/taglib/SelectTag.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/CustServiceWar/src/com/assurant/celita/taglib/SelectTag.java	(revision 49180)
+++ ../Application/Web/CustServiceWar/src/com/assurant/celita/taglib/SelectTag.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WControllerWar/src/com/consisint/acsele/web/vaadin/claim/panels/ClaimAdvancedSearchAcselePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/WControllerWar/src/com/consisint/acsele/web/vaadin/claim/panels/ClaimAdvancedSearchAcselePanel.java	(revision 49180)
+++ ../Application/Web/WControllerWar/src/com/consisint/acsele/web/vaadin/claim/panels/ClaimAdvancedSearchAcselePanel.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WControllerWar/web/WEB-INF/struts/struts-config_claimInterfaces.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
--- ../Application/Web/WControllerWar/web/WEB-INF/struts/struts-config_claimInterfaces.xml	(revision 49180)
+++ ../Application/Web/WControllerWar/web/WEB-INF/struts/struts-config_claimInterfaces.xml	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WControllerWar/web/ThirdParty/ThirdPartyData.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/WControllerWar/web/ThirdParty/ThirdPartyData.jsp	(revision 49180)
+++ ../Application/Web/WControllerWar/web/ThirdParty/ThirdPartyData.jsp	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WebServicesWar/srcClientInterseguro/com/interseguro/acsele/ws/services/PolicyService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/WebServicesWar/srcClientInterseguro/com/interseguro/acsele/ws/services/PolicyService.java	(revision 49180)
+++ ../Application/Web/WebServicesWar/srcClientInterseguro/com/interseguro/acsele/ws/services/PolicyService.java	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WControllerWar/web/claimInterfaces/refuseClaim.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/WControllerWar/web/claimInterfaces/refuseClaim.jsp	(revision 49180)
+++ ../Application/Web/WControllerWar/web/claimInterfaces/refuseClaim.jsp	(revision )
@@ -1,0 +1,0 @@
Index: ../Application/Web/WControllerWar/web/claimInterfaces/CRMCaseSelection.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/WControllerWar/web/claimInterfaces/CRMCaseSelection.jsp	(revision )
+++ ../Application/Web/WControllerWar/web/claimInterfaces/CRMCaseSelection.jsp	(revision )
@@ -0,0 +1,123 @@
+<%@ page import="java.util.ResourceBundle" %>
+<%@ page import="com.consisint.acsele.UserInfo" %>
+<%@ page import="java.util.List" %>
+<%@ page import="com.consisint.acsele.interseguro.interfaces.crm.entity.CRMCase" %>
+<%@ page import="com.consisint.acsele.util.AcseleConf" %>
+<%@ page
+        import="com.consisint.acsele.interseguro.interfaces.intermedia.event.Notification.services.enums.StatusAssociationTypeCRM" %>
+<%
+ResourceBundle messages = ResourceBundle.getBundle("ClaimMessagesBundle", UserInfo.getLocale());
+ResourceBundle rb = ResourceBundle.getBundle("ThirdPartyMessagesBundle", UserInfo.getLocale());
+List<CRMCase> crmList      = (List<CRMCase>) request.getAttribute("crmList");
+List<CRMCase> crmCaseAsociated = (List<CRMCase>) request.getAttribute("crmCaseAsociated");
+String typeAssociation      = (String) request.getAttribute("typeAssociation");
+String groupName1      = (String) request.getAttribute("groupName1");
+String groupName2      = (String) request.getAttribute("groupName2");
+String formName        = (String) request.getAttribute("formName");
+String plantilla        = (String) request.getAttribute("plantilla");
+String url = "/WController/claimInterfaces/clientCrmUpdate.do?typeAssociation="+typeAssociation+"&listCRM=listCRM";
+
+%>
+<html>
+    <head>
+        <meta http-equiv="Content-Type" content="text/html; charset=<%=AcseleConf.getProperty("charsetPage")%>">
+        <title><%= messages.getString("CRM.title")%></title>
+    </head>
+    <body>
+        <form name="formAssociateCRM" id="formAssociateCRM" action="" method="post">
+            <div>
+                <table>
+                    <tr class="TR_BGBLUE_C">
+                        <td >
+                            <%= messages.getString("CRM.case")%>
+                        </td>
+                    </tr>
+                    <tr align="center">
+                        <td class="TD_GREY_C" width="50%" align="center">
+                            <select id = "listCRM" name="listCRM" onchange="ShowSelected();" align="center">
+                                <option value='-1'><%= messages.getString("CRM.selection")%></option>
+                                <%--<option value="0"><%= messages.getString("CRM.selection")%></option>--%>
+                    <%
+                        for(CRMCase crm : crmList) out.println("<option value='"+crm.getCrmNumber()+"'>"+crm.getCrmNumber()+"</option>");
+                    %>
+                            </select>
+                        </td>
+                    </tr>
+                    <tr align="center">
+                        <%
+                            if(((String) typeAssociation).equalsIgnoreCase("RR")){
+                        %>
+                        <td class="TD_GREY_C" width="50%">
+                            <input id = "toAssign" type ="button" name="asign" class="BUTTON" style="width: 100px" disabled="disabled" value="<%= messages.getString("CRM.asign")%>"  onclick="getAjaxResponseTextAccordingForm('<%=url%>', callbackCRM, 'formAssociateCRM')"/>
+                        </td>
+                        <td class="TD_GREY_C" width="50%">
+                            <input type ="button" id = "skyp" value="<%= messages.getString("CRM.skyp")%>"  class="BUTTON" style="width: 100px" onclick="validateSelection('<%=groupName1%>','<%=groupName2%>','<%=formName%>')"/>
+                        </td>
+
+                        <%
+                        } else if(((String) typeAssociation).equalsIgnoreCase("RS")) {
+                        %>
+                        <td class="TD_GREY_C" width="50%">
+                            <input id = "toAssign" type ="button" name="asign" class="BUTTON" style="width: 100px" disabled="disabled" value="<%= messages.getString("CRM.asign")%>"  onclick="getAjaxResponseTextAccordingForm('<%=url%>', callbackCRM, 'formAssociateCRM')"/>
+                        </td>
+                        <td class="TD_GREY_C" width="50%">
+                            <input type ="button" id = "skyp" value="<%= messages.getString("CRM.skyp")%>"  class="BUTTON" style="width: 100px" onclick="refuseOK(<%=plantilla%>);"/>
+                        </td>
+                        <%
+                        } else if(((String) typeAssociation).equalsIgnoreCase("AP")) {
+                        %>
+                        <td class="TD_GREY_C" width="50%">
+                            <input id = "toAssign" type ="button" name="asign" class="BUTTON" style="width: 100px" disabled="disabled" value="<%= messages.getString("CRM.asign")%>"  onclick="getAjaxResponseTextAccordingForm('<%=url%>', callbackCRM, 'formAssociateCRM')"/>
+                        </td>
+                        <td class="TD_GREY_C" width="50%">
+                            <input type ="button" id = "skyp" value="<%= messages.getString("CRM.skyp")%>"  class="BUTTON" style="width: 100px" onclick="applyPaymentUAA()"/>
+                        </td>
+                        <%
+                        } else if(((String) typeAssociation).equalsIgnoreCase("RC")) {
+                        %>
+                        <td class="TD_GREY_C" width="50%">
+                            <input id = "toAssign" type ="button" name="asign" class="BUTTON" style="width: 100px" disabled="disabled" value="<%= messages.getString("CRM.asign")%>"  onclick="getAjaxResponseTextAccordingForm('<%=url%>', callbackCRM, 'formAssociateCRM')"/>
+                        </td>
+                        <td class="TD_GREY_C" width="50%">
+                            <input type ="button" id = "skyp" value="<%= messages.getString("CRM.skyp")%>"  class="BUTTON" style="width: 100px" onclick="pushOK();"/>
+                        </td>
+                        <%
+                            }
+                        %>
+                    </tr>
+                </table>
+                <%
+                    for(int i=0;i<crmCaseAsociated.size();i++){
+                        if(i==crmCaseAsociated.size()-1){
+                            if(!(crmCaseAsociated.get(i).getCrmNumber().isEmpty()) || crmCaseAsociated.get(i).getCrmNumber()!=null){
+                %>
+                <table>
+                    <tr>
+                        <td >
+
+                        </td>
+                    </tr>
+                    <tr class="TR_BGBLACK">
+                        <td >
+                            <%= messages.getString("CRM.previuslyAsociated")%>
+                        </td>
+                        <td >
+                            <%= crmCaseAsociated.get(i).getCrmNumber()%>
+                        </td>
+                        <td >
+                            <%= messages.getString("CRM.asociationType")%>
+                        </td>
+                        <td >
+                            <%= StatusAssociationTypeCRM.getIntanceByValue(crmCaseAsociated.get(i).getAssociationType()).getDescription()%>
+                        </td>
+                    </tr>
+                </table>
+                <%
+                            }
+                        }
+                    }
+                %>
+            </div>
+        </form>
+    </body>
+</html>
\ No newline at end of file
Index: ../Application/Web/WControllerWar/web/EJBAcsel-e/jsp/searchformpolicy.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Application/Web/WControllerWar/web/EJBAcsel-e/jsp/searchformpolicy.jsp	(revision 49180)
+++ ../Application/Web/WControllerWar/web/EJBAcsel-e/jsp/searchformpolicy.jsp	(revision )
@@ -1,0 +1,0 @@
